apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "db2-schema.fullname" . }}
  labels:
    {{- include "db2-schema.labels" . | nindent 4 }}
data:
  connect_remote_database.sh: |
    #!/usr/bin/env bash

    DATABASE_HOST="$1"
    DATABASE_PORT="$2"
    DATABASE_DATABASE="$3"
    DATABASE_USERNAME="$4"
    DATABASE_PASSWORD="$5"

    set -e

    echo -n "** Running as "
    whoami

    echo "Creating connection to database: name=${DATABASE_DATABASE}, ${DATABASE_HOST}:${DATABASE_PORT}"

    db2 catalog tcpip node prvsndb2 remote "${DATABASE_HOST}" server "${DATABASE_PORT}" SECURITY SSL;
    db2 catalog db "${DATABASE_DATABASE}" as "${DATABASE_DATABASE}" at node prvsndb2;
    db2 terminate;
    db2 connect to "${DATABASE_DATABASE}" user "${DATABASE_USERNAME}" using "${DATABASE_PASSWORD}";
  create_schemas.sh: |
    #!/usr/bin/env bash

    SCHEMAS="$1"

    if [[ -z "${SCHEMAS}" ]]; then
      echo "No schemas provided. Exiting..."
      exit 0
    fi

    require_env_var() {
      local var_name="$1"

      if [[ -z "${var_name}" ]]; then
        echo "The variable name must be provided" >&2
        exit 1
      fi

      if [[ -z "${!var_name}" ]]; then
        echo "${var_name} must be provided as an environment variable" >&2
        exit 1
      fi
    }

    require_env_var "DATABASE_HOST"
    require_env_var "DATABASE_PORT"
    require_env_var "DATABASE_DATABASE"
    require_env_var "DATABASE_USERNAME"
    require_env_var "DATABASE_PASSWORD"

    SCHEMA_FILE="/tmp/db2-schema.sql"

    SCHEMA_LIST=$(echo "${SCHEMAS}" | tr ";" "\n")

    echo -n "** Running as "
    whoami

    echo "Creating schema(s) in database: ${DATABASE_DATABASE}"

    for schema in $SCHEMA_LIST; do
      echo "create schema '${schema}';" >> "${SCHEMA_FILE}"
      echo "grant dbadm on database to user '${schema}';" >> "${SCHEMA_FILE}"
    done

    db2 -tf "${SCHEMA_FILE}"
  entrypoint.sh: |
    #!/usr/bin/env bash

    SCRIPT_DIR=$(cd $(dirname "$0"); pwd -P)

    dnf install procps -y

    /var/db2_setup/lib/setup_db2_instance.sh &

    count=0
    while [[ "${count}" -lt 6 ]]; do
      if [[ $(pgrep -f -c db2sysc) -gt 0 ]]; then
        echo "db2sysc process started"
        break
      fi

      echo "Sleeping for 60 seconds"
      count=$((count + 1))
      sleep 60
    done

    echo "DB2 is ready. Running commands..."

    set -e

    su - db2inst1 -c "${SCRIPT_DIR}/run_database_commands.sh"
  run_script.sh: |
    #!/usr/bin/env bash

    SCRIPT_DIR=$(cd $(dirname "$0"); pwd -P)

    DATABASE_DATABASE="$1"

    if [[ ! -f "${SCRIPT_DIR}/custom_script.sh" ]]; then
      echo "No custom script provided. Exiting..."
      exit 0
    fi

    set -e

    echo -n "** Running as "
    whoami

    echo "Executing custom script in database: ${DATABASE_DATABASE}"

    "${SCRIPT_DIR}/custom_script.sh" "${DATABASE_DATABASE}"
  {{- if .Values.customScript }}
  custom_script.sh: |
    {{- .Values.customScript | nindent 4 }}
  {{- end }}
